<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Rexie&#39;s Blog</title>
    <description>Experiences, pitfalls and records of baby steps of IOT, hardware, Arduino.
</description>
    <link>http://rexpie.github.io/</link>
    <atom:link href="http://rexpie.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sun, 23 Aug 2015 09:52:10 +0800</pubDate>
    <lastBuildDate>Sun, 23 Aug 2015 09:52:10 +0800</lastBuildDate>
    <generator>Jekyll v2.5.3</generator>
    
      <item>
        <title>Hacking Ardublock</title>
        <description>&lt;h2&gt;Adding an extension to Ardublock&lt;/h2&gt;

&lt;p&gt;Extended From: &lt;a href=&quot;http://blog.ardublock.com/2012/05/04/how-to-hack-ardublock/&quot;&gt;How to hack ardublock&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;Handling the dependencies&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Fork and clone Arduino form github&lt;/li&gt;
&lt;li&gt;Import openblocks and Ardublock into eclipse&lt;/li&gt;
&lt;li&gt;Import arduino-builder,arduino-dore and processing from Arduino project into eclipse&lt;/li&gt;
&lt;li&gt;Modify the buildpath of Ardublock and add the above 3 projects as dependency. Add openblocks and an dependency as well.&lt;/li&gt;
&lt;li&gt;Modify pom.xml in Ardublockï¼Œdelete openblocks and Arduino dependency entries(They became obsolete over time and was no longer maintained)&lt;/li&gt;
&lt;li&gt;Continue to delete the install-arduino-pde execution entry in pom.xml&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;You should now see no compiling errors within the projects. You may have a few warnings about the java compiler version. Just change the compilation configs to make eclipse happy.&lt;/p&gt;

&lt;p&gt;**If you are using other IDEs like IntelliJ, please use your own judgement to appropriately adapt the steps.&lt;/p&gt;

&lt;h3&gt;Adding an LED module&lt;/h3&gt;

&lt;p&gt;You can use the Ardublock article to do the same, here are some basic ideas:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Add one BlockGenus with your own parameters&lt;/li&gt;
&lt;li&gt;Register the BlockGenus into one BlockDrawer so that you&#39;ll see the newly added module in the GUI, inside the designated drawer menu.&lt;/li&gt;
&lt;li&gt;If you need new image, tag or other custom resources to go with the new module, you need to add them to the resources folder, with i18n entries. Modify the &lt;code&gt;ardublock&amp;lt;_{country_code}&amp;gt;.properties&lt;/code&gt; i18n file to achieve that.&lt;/li&gt;
&lt;li&gt;Modify block-mapping.properties and point the module to use the corresponding &lt;code&gt;Translator&lt;/code&gt; Java class. You need to extend the &lt;code&gt;Translator&lt;/code&gt; class if you want to dive in deeper.&lt;/li&gt;
&lt;/ol&gt;


&lt;h3&gt;Export and install&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Right click Ardublock and Openblocks projects and export a jar package&lt;/li&gt;
&lt;li&gt;You need to check the &lt;code&gt;export with all resources&lt;/code&gt; checkbox to include the image and configuration files.&lt;/li&gt;
&lt;li&gt;Put your jar into the Arduino tools folder. Be careful with the folder names as one of them is said to be case sensitive. See the &lt;a href=&quot;http://blog.ardublock.com/2012/05/04/how-to-hack-ardublock/&quot;&gt;official tutorial&lt;/a&gt; for sure.&lt;/li&gt;
&lt;/ol&gt;


&lt;h3&gt;Test&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Open the Arduino installation folder&lt;/li&gt;
&lt;li&gt;Run Arduino-debug and you can see the logs in the console window.&lt;/li&gt;
&lt;li&gt;Click on &lt;code&gt;Tools&lt;/code&gt;-&gt;&lt;code&gt;Ardublock&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Drag your new module and test the functions.&lt;/li&gt;
&lt;/ol&gt;


&lt;h2&gt;Adding an I2C module&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;You need to know how to add your custom header file and c++ file&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you want to use I2C modules like an I2C mounted 1602 LCD, you need to add the I2C c++ libraries for easier coding. The original Ardublock can only generate a single ino file. Here is how:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;First you create your new module, of course. See steps above. Let&#39;s call the new module I2C.&lt;/li&gt;
&lt;li&gt;Modify the &lt;code&gt;Translator&lt;/code&gt; base class and add a &lt;code&gt;customHeaderFileSet&lt;/code&gt; private member, maybe next to its own &lt;code&gt;headerFileSet&lt;/code&gt; member.&lt;/li&gt;
&lt;li&gt;Add a &lt;code&gt;addCustomHeaderFile&lt;/code&gt; API for clients and derived classes to manipulate the &lt;code&gt;customHeaderFileSet&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Modify your I2C module and call your API to add the custom header and/or c++ file.&lt;/li&gt;
&lt;/ol&gt;


&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;translator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addCustomHeaderFile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;LiquidCrystal_I2C.h&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;Import your header files and cpp file to eclipse. You should keep them well in your classpath.&lt;/li&gt;
&lt;li&gt;Next you need to use file manipulation to read from your jar file, and write the file stream into the Aruino temp project location. You don&#39;t want to write to the destination, since they would clobber the source file to import.&lt;/li&gt;
&lt;li&gt;Find the Aruino &lt;code&gt;Editor&lt;/code&gt; instance along the &lt;code&gt;Context&lt;/code&gt; instance and open your temp header and/or c++ file.&lt;/li&gt;
&lt;li&gt;Set the editor to the ino file, or else your translated text will be writing to the last file you opened by default.&lt;/li&gt;
&lt;/ol&gt;


&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;Sketch&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sketch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getEditor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getSketch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;File&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;folder&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sketch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getFolder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getParentFile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;File&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;header&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;folder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getAbsolutePath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;separator&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fileName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;InputStream&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getResource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;/com/ardublock/translator/block/dfrobot/&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fileName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;openStream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;OutputStream&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;FileOutputStream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;header&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buffer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4096&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bytesRead&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bytesRead&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buffer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buffer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bytesRead&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;is&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;You can easily add new module for &lt;strong&gt;simple input and output&lt;/strong&gt;.
You have to drill down to the &lt;code&gt;Translator&lt;/code&gt; core for advanced code generation, but it is not a very difficult task because the source code is quite well orgnized. Thumbs up to the &lt;a href=&quot;http://blog.ardublock.com&quot;&gt;Arublock&lt;/a&gt; team.&lt;/p&gt;
</description>
        <pubDate>Sun, 23 Aug 2015 05:55:00 +0800</pubDate>
        <link>http://rexpie.github.io/visual/programming/2015/08/23/Hacking%20Ardublock.html</link>
        <guid isPermaLink="true">http://rexpie.github.io/visual/programming/2015/08/23/Hacking%20Ardublock.html</guid>
        
        
        <category>visual</category>
        
        <category>programming</category>
        
      </item>
    
  </channel>
</rss>
