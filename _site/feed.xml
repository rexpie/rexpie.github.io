<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Rex&#39;s Blog</title>
    <description>Soft sides and blind spots of IOT, hardware, Arduino.
</description>
    <link>http://rexpie.github.io/</link>
    <atom:link href="http://rexpie.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Wed, 26 Aug 2015 16:49:03 +0800</pubDate>
    <lastBuildDate>Wed, 26 Aug 2015 16:49:03 +0800</lastBuildDate>
    <generator>Jekyll v2.5.3</generator>
    
      <item>
        <title>Load Balancing with HAProxy</title>
        <description>&lt;h1&gt;Need to cluster&lt;/h1&gt;

&lt;p&gt;IBM has a &lt;a href=&quot;http://www.redbooks.ibm.com/redbooks/pdfs/sg248054.pdf&quot;&gt;Redbook&lt;/a&gt; for its own IOT service environment. The book also described the topologies of enterprise MQTT service architectures. So, to cluster some mosquitto brokers, we need some other tools.&lt;/p&gt;

&lt;p&gt;Mosquitto is a single thread process. To scale out, we need tools to better monitor and manage them.&lt;/p&gt;

&lt;h1&gt;Cue in load balancing&lt;/h1&gt;

&lt;p&gt;I followed the steps in this nice &lt;a href=&quot;https://serversforhackers.com/load-balancing-with-haproxy&quot;&gt;tutorial&lt;/a&gt;, others you googled might be just as good, as HAProxy is very easy to install, configure and run.&lt;/p&gt;

&lt;p&gt;I changed the configuration to match our need for mqtt connections.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cfg&quot; data-lang=&quot;cfg&quot;&gt;&lt;span class=&quot;err&quot;&gt;listen&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;mqtt&lt;/span&gt;
  &lt;span class=&quot;err&quot;&gt;bind&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;*:1883&lt;/span&gt;
  &lt;span class=&quot;err&quot;&gt;mode&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;tcp&lt;/span&gt;
  &lt;span class=&quot;err&quot;&gt;maxconn&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;200000&lt;/span&gt;
  &lt;span class=&quot;err&quot;&gt;option&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;tcplog&lt;/span&gt;
  &lt;span class=&quot;err&quot;&gt;option&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;redispatch&lt;/span&gt;
  &lt;span class=&quot;err&quot;&gt;balance&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;leastconn&lt;/span&gt;
  &lt;span class=&quot;err&quot;&gt;server&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;serv1&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;192.168.0.36:1883&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;check&lt;/span&gt;
  &lt;span class=&quot;err&quot;&gt;server&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;serv2&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;192.168.0.136:1883&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;check&lt;/span&gt;

&lt;span class=&quot;err&quot;&gt;listen&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;stats&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;*:1936&lt;/span&gt;
  &lt;span class=&quot;err&quot;&gt;stats&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;enable&lt;/span&gt;
  &lt;span class=&quot;err&quot;&gt;stats&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;uri&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;/&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Configurations explained&lt;/h2&gt;

&lt;h2&gt;&lt;code&gt;option redispatch&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;This is used to tell HAProxy to retry to another backend server when one of the servers goes down, rather than giving a 503 error back to the fronted.&lt;/p&gt;

&lt;h2&gt;&lt;code&gt;balance leastconn&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;This is the balancing algorithm, we expect to have many TCP connections with little traffic and low spikes so the we should use this method to pan out the number of connections evenly.&lt;/p&gt;

&lt;h2&gt;Monitoring HAProxy&lt;/h2&gt;

&lt;p&gt;The HAProxy comes with a handy web interface for quick monitoring. The stats block of the configuration shows how to do this. I left out the &lt;code&gt;auth&lt;/code&gt; config so I don&#39;t have to type in user name and password every now and then.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://rexpie.github.io/assets/haproxystat.png&quot; title=&quot;HAProxy Stats Screenshot&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;h1&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;HAProxy can be used to load balance a cluster of single-threaded mosquitto servers in a LAN environment. We can even setup multiple clusters globally.&lt;/p&gt;

&lt;p&gt;Next we maybe can try out the provisioning service as to auto configure the MQTT clients.&lt;/p&gt;
</description>
        <pubDate>Wed, 26 Aug 2015 00:00:00 +0800</pubDate>
        <link>http://rexpie.github.io/2015/08/26/loadbalancing-with-haproxy.html</link>
        <guid isPermaLink="true">http://rexpie.github.io/2015/08/26/loadbalancing-with-haproxy.html</guid>
        
        <category>haproxy,</category>
        
        <category>load</category>
        
        <category>balancing,</category>
        
        <category>mosquitto</category>
        
        
      </item>
    
      <item>
        <title>Mosquitto Troubleshooting</title>
        <description>&lt;h1&gt;Issues with mosquitto_pub&lt;/h1&gt;

&lt;p&gt;When I tried to execute the &lt;code&gt;mosquitto_pub&lt;/code&gt; command, it complains about a lib missing:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;rex@ubuntu:~$ mosquitto_pub -t &#39;/mqtt-bench/benchmark&#39; -m &#39;testContent&#39;
mosquitto_pub: error while loading shared libraries: libmosquitto.so.1: cannot open shared object file: No such file or directory
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I &lt;strong&gt;built&lt;/strong&gt; this from source. Well seems like mosquitto needs a bit more consistent at housekeeping when it tries to install and execute.&lt;/p&gt;

&lt;p&gt;Let&#39;s dig in.&lt;/p&gt;

&lt;p&gt;First use strace to look what it is looking for:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;rex@ubuntu:~$ strace mosquitto_pub -t &#39;/mqtt-bench/benchmark&#39; -m &#39;testContent&#39;
open(&quot;/usr/lib/x86_64/libmosquitto.so.1&quot;, O_RDONLY|O_CLOEXEC) = -1 ENOENT (No such file or directory)
stat(&quot;/usr/lib/x86_64&quot;, 0x7fff1e3b13f0) = -1 ENOENT (No such file or directory)
open(&quot;/usr/lib/libmosquitto.so.1&quot;, O_RDONLY|O_CLOEXEC) = -1 ENOENT (No such file or directory)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Okay so it looks through &lt;code&gt;/usr/lib&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Where &lt;strong&gt;is&lt;/strong&gt; the lib then?&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;rex@ubuntu:~$ locate libmosquitto.so|xargs ls -l
/usr/local/lib/libmosquitto.so
/usr/local/lib/libmosquitto.so.1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So it looks at &lt;code&gt;/usr/lib&lt;/code&gt; rather than &lt;code&gt;/usr/local/lib&lt;/code&gt;. Fair enough, I did not specify the prefix when building.&lt;/p&gt;

&lt;p&gt;Fix is easy:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo ln -s /usr/local/lib/libmosquitto.so.1 /usr/lib/libmosquitto.so.1
&lt;/code&gt;&lt;/pre&gt;
</description>
        <pubDate>Tue, 25 Aug 2015 00:00:00 +0800</pubDate>
        <link>http://rexpie.github.io/2015/08/25/mosquitto-troubleshooting.html</link>
        <guid isPermaLink="true">http://rexpie.github.io/2015/08/25/mosquitto-troubleshooting.html</guid>
        
        <category>mqtt,</category>
        
        <category>mosquitto</category>
        
        
      </item>
    
      <item>
        <title>Stress testing Mosquitto MQTT Broker</title>
        <description>&lt;h1&gt;What am I testing for&lt;/h1&gt;

&lt;p&gt;I am testing the server under a very &lt;strong&gt;specific&lt;/strong&gt; scenario. Very large number of subscribers and publishers, but very little traffic for each one. I am trying to build a sensor network server with push capabilities.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It is written in C, with tiny memory footprints for each connection, unlike Apache&#39;s ActiveMQ or Apollo which creates a thread object for every live connection.&lt;/li&gt;
&lt;li&gt;It is single threaded&lt;/li&gt;
&lt;li&gt;It is easy to install, simple to configure and quick to run&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;I am not saying other brokers are not superior on those aspects. Simplicity is what I am after and after all, I think that managing a network of broker cluster exceeds the boundary of software design and need system architecture behind it. So I want to start with simple tests on a single server and see how it goes.&lt;/p&gt;

&lt;p&gt;Here is an &lt;a href=&quot;http://w3yyb.sinaapp.com/archives/1601&quot;&gt;article&lt;/a&gt; &lt;del&gt;in Chinese&lt;/del&gt; of an emperical study on MQTT broker performances. Basic translation of the conclusion is:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Downsides: Mosquitto only utilizes one CPU; EMQTT writes too much disk io and has low throughput; ActiveMQ/Apollo eats a lot of RAM and sometimes crashes.&lt;/li&gt;
&lt;li&gt;Upsides: EMQTT &amp;amp; Mosquitto are quite stable. EMQTT has high cuncurrent connection counts. Apache ones can use multicore.&lt;/li&gt;
&lt;/ul&gt;


&lt;h1&gt;Prerequisites&lt;/h1&gt;

&lt;p&gt;I am testing on two Linux/Unix like systems (actually they are 2 virtual Ubuntu desktop hosted in a VMWare env, if you must know) connected in the same LAN. Let&#39;s call them &lt;em&gt;Alice&lt;/em&gt; and &lt;em&gt;Bob&lt;/em&gt;.&lt;/p&gt;

&lt;h1&gt;Setting up the environment&lt;/h1&gt;

&lt;p&gt;Here are the steps to execute the stress test. I can give you the results beforehand:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;It can handle at least 20k simultanious connections at a speed of 7000+ messages per second for a single 2.1g core virtual server with just 12MB of mem.&lt;/p&gt;&lt;/blockquote&gt;

&lt;h2&gt;Changing System File Limitations&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt; Do this on both Alice and Bob &lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Your system may restrice open files per process and system-wide file handle counts.&lt;/p&gt;

&lt;p&gt;I found a &lt;a href=&quot;https://rtcamp.com/tutorials/linux/increase-open-files-limit/&quot;&gt;tutorial&lt;/a&gt; for linux/Unix like systems.&lt;/p&gt;

&lt;p&gt;Basically you edit &lt;code&gt;/etc/security/limits.conf&lt;/code&gt; and put in:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;*         hard    nofile      500000&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;*         soft    nofile      500000&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;You may also need to modify &lt;code&gt;/etc/sysctl.conf&lt;/code&gt; and put in:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;fs.file-max = 2097152&lt;/code&gt; and run &lt;code&gt;sysctl -p&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;sudo if necessary&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;Mosquitto Server&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt; Do this on Alice &lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you want to use the latest version, go to their official download &lt;a href=&quot;http://mosquitto.org/download/&quot;&gt;link&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Or if you want to quickly install a curated version for you system, you can also check out their recipes in the same page.&lt;/p&gt;

&lt;p&gt;I built the server from its source. I found out that I need:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;g++&lt;/li&gt;
&lt;li&gt;uuid-dev&lt;/li&gt;
&lt;li&gt;libc-ares-dev&lt;/li&gt;
&lt;li&gt;libssl-dev&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Then you can execute&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;make &amp;amp;&amp;amp; sudo make install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and check if you have &lt;code&gt;mosquitto&lt;/code&gt; available after that.&lt;/p&gt;

&lt;h2&gt;Configuring and Starting Mosquitto&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt; Do this on Alice &lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;You can refer the &lt;a href=&quot;http://mosquitto.org/man/mosquitto-conf-5.html&quot;&gt;documentation&lt;/a&gt; for the detailed parameters, but I focus on the &lt;code&gt;max_connections&lt;/code&gt; configuration value and change it to &lt;code&gt;-1&lt;/code&gt;(unlimited)&lt;/p&gt;

&lt;p&gt;Then just execute &lt;code&gt;mosquitto&lt;/code&gt;. You can add the &lt;code&gt;-d&lt;/code&gt; switch to run it in the background. I just like to see the logs.&lt;/p&gt;

&lt;h2&gt;Benchmark tool&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt; Do this on Bob &lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I used a pretty cool tool called &lt;a href=&quot;https://github.com/takanorig/mqtt-bench&quot;&gt;mqtt-bench&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I can&#39;t get it to work using the &lt;code&gt;go get&lt;/code&gt; command in its documentation, so I downloaded the &lt;a href=&quot;https://github.com/takanorig/mqtt-bench/wiki/Download&quot;&gt;binary&lt;/a&gt; as it advised.&lt;/p&gt;

&lt;h2&gt;Starting Test&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt; Do this on Bob &lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The CLI command for the benchmark tool looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;./mqtt-bench  -action=p -broker=&quot;tcp://192.168.0.89:1883&quot; -clients=20000 -count=10
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Checking Status on Alice&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt; Of course do this on Alice &lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;You can use the &lt;code&gt;top&lt;/code&gt; command to see the CPU and memory usage of Alice.
For mine, I see a single core surge to 100 with a 0.3% memory ( out of 4G, so 12M ) when the connections are being accepted.&lt;/p&gt;

&lt;p&gt;You can also check the network connections using:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;netstat -pant | grep mosquitto | wc -l
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;I already gave the results.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;//TODO&lt;/code&gt; Next time maybe I can use some more Bobs to connect to Alice and see how much fun they can have.&lt;/p&gt;
</description>
        <pubDate>Sun, 23 Aug 2015 18:55:00 +0800</pubDate>
        <link>http://rexpie.github.io/2015/08/23/stress-testing-mosquitto.html</link>
        <guid isPermaLink="true">http://rexpie.github.io/2015/08/23/stress-testing-mosquitto.html</guid>
        
        <category>mqtt</category>
        
        <category>mosquitto</category>
        
        
      </item>
    
      <item>
        <title>Extending Scratch</title>
        <description>&lt;h2&gt;Why Scratch&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://scratch.mit.edu/&quot;&gt;Scratch2&lt;/a&gt; is becoming more mature with a steadily growing user community. MIT has done a great job at propelling programming education.&lt;/p&gt;

&lt;p&gt;We focus on how to leverage Scratch to further enable hardware interaction for the young.&lt;/p&gt;

&lt;p&gt;The challenge is extending Scratch and make it talk to the various boards and devices.&lt;/p&gt;

&lt;h2&gt;But How?&lt;/h2&gt;

&lt;p&gt;Here is the architecture of the Scratch extension module. Note this is still under development by the Scratch team and is subject to change.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://rexpie.github.io/assets/Scratch2.png&quot; title=&quot;Scratch Architecture&quot; alt=&quot;Scratch arch&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You can also check the &lt;a href=&quot;http://wiki.scratch.mit.edu/wiki/Scratch_Extension&quot;&gt;official extension wiki&lt;/a&gt; to get the latest updated info.&lt;/p&gt;

&lt;h2&gt;What else?&lt;/h2&gt;

&lt;p&gt;As you can see in the architecture diagram, you will need a &lt;strong&gt;helper app&lt;/strong&gt; to enable the communication as Scratch does not speak on channels other than the &lt;code&gt;HTTP&lt;/code&gt; protocol.&lt;/p&gt;

&lt;p&gt;What you need is a third party, preferrably open sourced project to do that. Your helper app should act as an &lt;code&gt;HTTP proxy&lt;/code&gt; and talk to Scratch &lt;strong&gt;AND&lt;/strong&gt; it should also be able to talk to the board via serial ports.&lt;/p&gt;

&lt;h2&gt;Who&#39;s doing this&lt;/h2&gt;

&lt;p&gt;Let&#39;s take a look at some open source initiatives&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://johnny-five.io&quot;&gt;johnny-five&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/MrYsLab/s2a_fm&quot;&gt;s2a_fm&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt; Both projct is based on the &lt;a href=&quot;http://firmata.org/&quot;&gt;Firmata&lt;/a&gt; protocol.&lt;/p&gt;

&lt;h3&gt;johnny-five&lt;/h3&gt;

&lt;p&gt;This popular project is node-js based. Highly configurable, actively maintained and very popular. You can leverage the server module of the nodejs project and easily put together a helper app with very little code.&lt;/p&gt;

&lt;p&gt;Some sample code:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;five&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;johnny-five&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;board&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;five&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Board&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;board&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;ready&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;led&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;five&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Led&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;13&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;led&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;blink&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;500&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;s2a_fm&lt;/h3&gt;

&lt;p&gt;This project bases on PyMata, a firmata Python client. It already integrated the server request handling and Firmata communication. You can extend the existing modules within the framework relatively easily.&lt;/p&gt;

&lt;p&gt;Here is a &lt;a href=&quot;https://www.youtube.com/watch?v=tUv_Uu_SqZk&quot;&gt;video&lt;/a&gt; for s2a_fm based project&lt;/p&gt;

&lt;p&gt;You can choose whichever project you are comfortable with.&lt;/p&gt;
</description>
        <pubDate>Sun, 23 Aug 2015 00:00:00 +0800</pubDate>
        <link>http://rexpie.github.io/2015/08/23/extending-scratch.html</link>
        <guid isPermaLink="true">http://rexpie.github.io/2015/08/23/extending-scratch.html</guid>
        
        <category>Visual</category>
        
        <category>Programming</category>
        
        
      </item>
    
      <item>
        <title>Hacking Ardublock</title>
        <description>&lt;h2&gt;Adding an extension to Ardublock&lt;/h2&gt;

&lt;p&gt;Extended From: &lt;a href=&quot;http://blog.ardublock.com/2012/05/04/how-to-hack-ardublock/&quot;&gt;How to hack ardublock&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;Handling the dependencies&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Fork and clone Arduino form github&lt;/li&gt;
&lt;li&gt;Import openblocks and Ardublock into eclipse&lt;/li&gt;
&lt;li&gt;Import arduino-builder,arduino-dore and processing from Arduino project into eclipse&lt;/li&gt;
&lt;li&gt;Modify the buildpath of Ardublock and add the above 3 projects as dependency. Add openblocks and an dependency as well.&lt;/li&gt;
&lt;li&gt;Modify pom.xml in Ardublock，delete openblocks and Arduino dependency entries(They became obsolete over time and was no longer maintained)&lt;/li&gt;
&lt;li&gt;Continue to delete the install-arduino-pde execution entry in pom.xml&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;You should now see no compiling errors within the projects. You may have a few warnings about the java compiler version. Just change the compilation configs to make eclipse happy.&lt;/p&gt;

&lt;p&gt;**If you are using other IDEs like IntelliJ, please use your own judgement to appropriately adapt the steps.&lt;/p&gt;

&lt;h3&gt;Adding an LED module&lt;/h3&gt;

&lt;p&gt;You can use the Ardublock article to do the same, here are some basic ideas:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Add one BlockGenus with your own parameters&lt;/li&gt;
&lt;li&gt;Register the BlockGenus into one BlockDrawer so that you&#39;ll see the newly added module in the GUI, inside the designated drawer menu.&lt;/li&gt;
&lt;li&gt;If you need new image, tag or other custom resources to go with the new module, you need to add them to the resources folder, with i18n entries. Modify the &lt;code&gt;ardublock&amp;lt;_{country_code}&amp;gt;.properties&lt;/code&gt; i18n file to achieve that.&lt;/li&gt;
&lt;li&gt;Modify block-mapping.properties and point the module to use the corresponding &lt;code&gt;Translator&lt;/code&gt; Java class. You need to extend the &lt;code&gt;Translator&lt;/code&gt; class if you want to dive in deeper.&lt;/li&gt;
&lt;/ol&gt;


&lt;h3&gt;Export and install&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Right click Ardublock and Openblocks projects and export a jar package&lt;/li&gt;
&lt;li&gt;You need to check the &lt;code&gt;export with all resources&lt;/code&gt; checkbox to include the image and configuration files.&lt;/li&gt;
&lt;li&gt;Put your jar into the Arduino tools folder. Be careful with the folder names as one of them is said to be case sensitive. See the &lt;a href=&quot;http://blog.ardublock.com/2012/05/04/how-to-hack-ardublock/&quot;&gt;official tutorial&lt;/a&gt; for sure.&lt;/li&gt;
&lt;/ol&gt;


&lt;h3&gt;Test&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Open the Arduino installation folder&lt;/li&gt;
&lt;li&gt;Run Arduino-debug and you can see the logs in the console window.&lt;/li&gt;
&lt;li&gt;Click on &lt;code&gt;Tools&lt;/code&gt;-&gt;&lt;code&gt;Ardublock&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Drag your new module and test the functions.&lt;/li&gt;
&lt;/ol&gt;


&lt;h2&gt;Adding an I2C module&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;You need to know how to add your custom header file and c++ file&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you want to use I2C modules like an I2C mounted 1602 LCD, you need to add the I2C c++ libraries for easier coding. The original Ardublock can only generate a single ino file. Here is how:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;First you create your new module, of course. See steps above. Let&#39;s call the new module I2C.&lt;/li&gt;
&lt;li&gt;Modify the &lt;code&gt;Translator&lt;/code&gt; base class and add a &lt;code&gt;customHeaderFileSet&lt;/code&gt; private member, maybe next to its own &lt;code&gt;headerFileSet&lt;/code&gt; member.&lt;/li&gt;
&lt;li&gt;Add a &lt;code&gt;addCustomHeaderFile&lt;/code&gt; API for clients and derived classes to manipulate the &lt;code&gt;customHeaderFileSet&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Modify your I2C module and call your API to add the custom header and/or c++ file.&lt;/li&gt;
&lt;/ol&gt;


&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;translator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addCustomHeaderFile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;LiquidCrystal_I2C.h&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;Import your header files and cpp file to eclipse. You should keep them well in your classpath.&lt;/li&gt;
&lt;li&gt;Next you need to use file manipulation to read from your jar file, and write the file stream into the Aruino temp project location. You don&#39;t want to write to the destination, since they would clobber the source file to import.&lt;/li&gt;
&lt;li&gt;Find the Aruino &lt;code&gt;Editor&lt;/code&gt; instance along the &lt;code&gt;Context&lt;/code&gt; instance and open your temp header and/or c++ file.&lt;/li&gt;
&lt;li&gt;Set the editor to the ino file, or else your translated text will be writing to the last file you opened by default.&lt;/li&gt;
&lt;/ol&gt;


&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;Sketch&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sketch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getEditor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getSketch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;File&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;folder&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sketch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getFolder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getParentFile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;File&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;header&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;folder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getAbsolutePath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;separator&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fileName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;InputStream&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getResource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;/com/ardublock/translator/block/dfrobot/&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fileName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;openStream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;OutputStream&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;FileOutputStream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;header&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buffer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4096&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bytesRead&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bytesRead&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buffer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buffer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bytesRead&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;is&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;You can easily add new module for &lt;strong&gt;simple input and output&lt;/strong&gt;.
You have to drill down to the &lt;code&gt;Translator&lt;/code&gt; core for advanced code generation, but it is not a very difficult task because the source code is quite well orgnized. Thumbs up to the &lt;a href=&quot;http://blog.ardublock.com&quot;&gt;Arublock&lt;/a&gt; team.&lt;/p&gt;
</description>
        <pubDate>Sat, 22 Aug 2015 00:00:00 +0800</pubDate>
        <link>http://rexpie.github.io/2015/08/22/Hacking%20Ardublock.html</link>
        <guid isPermaLink="true">http://rexpie.github.io/2015/08/22/Hacking%20Ardublock.html</guid>
        
        <category>Visual</category>
        
        <category>Programming</category>
        
        
      </item>
    
  </channel>
</rss>
