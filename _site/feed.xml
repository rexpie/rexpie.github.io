<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Rex&#39;s Blog</title>
    <description>Soft sides and blind spots of IOT, hardware, Arduino.
</description>
    <link>http://rexpie.github.io/</link>
    <atom:link href="http://rexpie.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Mon, 21 Sep 2015 16:32:14 +0800</pubDate>
    <lastBuildDate>Mon, 21 Sep 2015 16:32:14 +0800</lastBuildDate>
    <generator>Jekyll v2.5.3</generator>
    
      <item>
        <title>Fruit Piano with Firmata</title>
        <description>&lt;p&gt;In the previous post I said it would be more expensive to implement a Firmata based approach. I was wrong. Firmata SYSEX command set is quite easy to extend actually.&lt;/p&gt;

&lt;h1&gt;Extending Firmata on Arduino&lt;/h1&gt;

&lt;p&gt;I was strolling on google when a wild &lt;a href=&quot;http://blog.s4a.cat/2015/03/13/Extending-Firmata-for-Snap4Arduino.html&quot;&gt;tutorial&lt;/a&gt; appears. Thanks to this piece of example which encouraged me to give Firmata a try.&lt;/p&gt;

&lt;p&gt;I was previously looking at Johnny-five&#39;s code and was properly scared off. The complexity is just too damn high.&lt;/p&gt;

&lt;p&gt;However we are not toying with Johnny-five this time, just plain old Firmata.&lt;/p&gt;

&lt;p&gt;First we open up the StandardFirmata ino file and insert this code:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x08&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;Firmata&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;START_SYSEX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;Firmata&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x08&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;Firmata&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;Firmata&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;readCapacitivePin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]));&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;Firmata&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;END_SYSEX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Also insert the readCapacitivePin function to the end of the file. You can find the code in &lt;a href=&quot;http://playground.arduino.cc/Code/CapacitiveSensor&quot;&gt;this post&lt;/a&gt;.&lt;/p&gt;

&lt;h1&gt;Extending Firmata Nodejs client&lt;/h1&gt;

&lt;p&gt;You can get your firmata module from npm.&lt;/p&gt;

&lt;p&gt;Once you have installed the module, go to its directory and find &lt;code&gt;lib/firmata.js&lt;/code&gt;.
Add the following code:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;PIN_CAPACITANCE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x08&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;SYSEX_RESPONSE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;PIN_CAPACITANCE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;board&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;pin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;board&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;currentBuffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cap&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;board&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;currentBuffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
 &lt;span class=&quot;c1&quot;&gt;// console.log(board.currentBuffer.toString(&amp;quot;hex&amp;quot;));&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;board&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pins&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]){&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;board&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pins&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cap&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;Board&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prototype&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;queryPinCapacitance&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;transport&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;START_SYSEX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;PIN_CAPACITANCE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;pin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;END_SYSEX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]));&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;Testing&lt;/h1&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;serialPort&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;serialport&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;defaultPort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;firmata&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;./lib/firmata.js&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;repl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;repl&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;


&lt;span class=&quot;nx&quot;&gt;serialPort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Arduino COM ports usually have the manufacturer name start with &amp;quot;Arduino&amp;quot;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;manufacturer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toLowerCase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;indexOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;arduino&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;defaultPort&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;comName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;board&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;firmata&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Board&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;defaultPort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Successfully Connected to &amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;defaultPort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;nx&quot;&gt;repl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;firmata&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;board&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;board&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You can type in board.queryPinCapacitance(13) and try it out. Board setup is easy:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://playground.arduino.cc/uploads/Code/capacitive.jpg&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Image curtesy to Arduino&lt;/p&gt;

&lt;h1&gt;Firmataized Fruit Piano&lt;/h1&gt;

&lt;p&gt;Here is your Helper App code&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;serialPort&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;serialport&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;firmata&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;firmata&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;http&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;http&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;defaultPort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// holding the values of each port in a map, updated continuously&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fruits&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{};&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;serialPort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Arduino COM ports usually have the manufacturer name start with &amp;quot;Arduino&amp;quot;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;manufacturer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toLowerCase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;indexOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;arduino&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;defaultPort&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;comName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;board&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;firmata&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Board&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;defaultPort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Connected to:&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;defaultPort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;nx&quot;&gt;setInterval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;pinNum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;pinNum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;14&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;pinNum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                        &lt;span class=&quot;nx&quot;&gt;board&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;queryPinCapacitance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pinNum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                        &lt;span class=&quot;nx&quot;&gt;fruits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pinNum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;board&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pins&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pinNum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// global http server&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;server&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;server&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createServer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// start recording request entry time&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;/poll&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// not poll&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// print non-polling command sent by Scratch       &lt;/span&gt;

    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Polling&lt;/span&gt;

        &lt;span class=&quot;nb&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;keys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fruits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pinName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;capacity/&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;pinName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot; &amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fruits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pinName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;\n&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// end if&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;server&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;listen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;23456&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;Ready to Go&lt;/h1&gt;

&lt;p&gt;You can just use the Scratch project in the previous Fruit Piano Scratch project. The Scratch project is athogonal to our Helper App implementation hence no change is needed.&lt;/p&gt;
</description>
        <pubDate>Wed, 16 Sep 2015 00:00:00 +0800</pubDate>
        <link>http://rexpie.github.io/2015/09/16/Fruit-Piano-Firmata.html</link>
        <guid isPermaLink="true">http://rexpie.github.io/2015/09/16/Fruit-Piano-Firmata.html</guid>
        
        <category>Visual</category>
        
        <category>Programming</category>
        
        
      </item>
    
      <item>
        <title>Fruit Piano with Arduino/Scratch</title>
        <description>&lt;h1&gt;Fruit Piano with Arduino/Scratch&lt;/h1&gt;

&lt;p&gt;We have seen many interesting musical applications with Arduino &lt;a href=&quot;https://www.youtube.com/watch?v=jAVE6T7FqJs&quot;&gt;here&lt;/a&gt; and &lt;a href=&quot;https://www.youtube.com/watch?v=yRvC8lNsvZU&quot;&gt;there&lt;/a&gt;. They are quite fun if you have enough experience with musical instruments, but what if you want to appear better when you don&#39;t have those trained hands?&lt;/p&gt;

&lt;p&gt;Scratch comes to the rescue.&lt;/p&gt;

&lt;p&gt;Here we combine the quick prototype capabilities of Arduino and rich interactive libraries of Scratch to make the musics a bit more colourful.&lt;/p&gt;

&lt;h1&gt;System Architecture&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;http://rexpie.github.io/assets/Fruit%20Piano%20Arch.svg&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The system is quite similar to the one with Firmata in my another &lt;a href=&quot;http://rexpie.github.io/2015/08/23/extending-scratch.html&quot;&gt;article&lt;/a&gt;, except that it does not use Firmata. Extending firmata is of course a choice, however a quite expensive one.&lt;/p&gt;

&lt;p&gt;In this system, Arduino reports the status of each pin to the Helper App, which bundles the results and send over to Scratch. Scratch listens for changes in the pin values and triggers a sound accordingly when the threshold is exceeded.&lt;/p&gt;

&lt;h2&gt;Reading the input capacitance from digital pin&lt;/h2&gt;

&lt;p&gt;This is essentially witchcraft. You can refer to &lt;a href=&quot;http://playground.arduino.cc/Code/CapacitiveSensor&quot;&gt;this post&lt;/a&gt;. You can use your finger to test its effect. Or if you have rather dry fingers, you can stick the wire into a piece of rolled-up wet paper tissue to simulate fruit. We surely don&#39;t want to waste food just for testing.&lt;/p&gt;

&lt;h2&gt;Channel Between Scratch and Arduino&lt;/h2&gt;

&lt;h3&gt;Arduino Code&lt;/h3&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// setup Serial port baud rate&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Serial&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;begin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;115200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;loop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// scan every digital pin&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;14&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
  
    &lt;span class=&quot;cm&quot;&gt;/* Prints out:&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;    * 2 2&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;    * 3 2&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;    * etc.*/&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Serial&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Serial&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot; &amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Serial&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;readCapacitivePin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Serial&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// no delay causes printing garbage&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;delay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This code just loops over each pin and report their capacitance readings to the serial port.&lt;/p&gt;

&lt;h3&gt;Helper App Code&lt;/h3&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;serialPort&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;serialport&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;http&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;http&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;defaultPort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// holding the values of each port in a map, updated continuously&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fruits&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{};&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;serialPort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Arduino COM ports usually have the manufacturer name start with &amp;quot;Arduino&amp;quot;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;manufacturer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toLowerCase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;indexOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;arduino&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;defaultPort&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;comName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

            &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;serialPort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;SerialPort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;defaultPort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;nx&quot;&gt;baudrate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;115200&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// must match the baud rate in the Arduino sketch code&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

            &lt;span class=&quot;nx&quot;&gt;sp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;open&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;nx&quot;&gt;sp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;data&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;line&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
                    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;lines&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;\n&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// split line breaks&lt;/span&gt;
                    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;columns&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot; &amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// split pin and reading&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;columns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// get rid of bad format&lt;/span&gt;
                        &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;pin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;columns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
                        &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;reading&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;columns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
                        &lt;span class=&quot;nx&quot;&gt;reading&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;reading&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/(\r\n|\n|\r)/gm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                        &lt;span class=&quot;nx&quot;&gt;fruits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;reading&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;dir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fruits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// global http server&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;server&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;server&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createServer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// start recording request entry time&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;/poll&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// not poll&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// print non-polling command sent by Scratch       &lt;/span&gt;

    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Polling&lt;/span&gt;

        &lt;span class=&quot;nb&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;keys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fruits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pinName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// prints &amp;quot;capacity/13 2\n&amp;quot;, for instance&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;capacity/&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;pinName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot; &amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fruits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pinName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;\n&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// end if&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;server&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;listen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;23456&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// HTTP port to listen to&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This runs on nodejs. You must have the &lt;a href=&quot;https://www.npmjs.com/package/serialport&quot;&gt;serialport&lt;/a&gt; package installed.&lt;/p&gt;

&lt;h3&gt;Scratch Extension File&lt;/h3&gt;

&lt;p&gt;You also need to define your own extension so Scratch can get data from your Helper App.&lt;/p&gt;

&lt;p&gt;Write up a text file and call it Fruits.s2e, with below content:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;   &lt;span class=&quot;s2&quot;&gt;&amp;quot;extensionName&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;DFRobot&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&amp;quot;extensionPort&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;23456&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&amp;quot;blockSpecs&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;r&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Fruit reading at pin %n&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;capacity&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;13&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;the &quot;r&quot; means it is an input block. The &quot;capacity&quot; here is the reading variable identifier and must match the format we send from Nodejs server.&lt;/p&gt;

&lt;h3&gt;Setting up the Scratch Project&lt;/h3&gt;

&lt;p&gt;The Chinese is just the translation of &quot;Fruit reading at Pin&quot;. I would advise against printing this on your T-shirt.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://rexpie.github.io/assets/Fruit%20Scratch.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As you can see you can make Scratch to play any sound you like. This example just uses built-in piano tones. You can customise Scratch to play any sound of your choice.&lt;/p&gt;

&lt;p&gt;The reason for so many separate blocks is to enable chord, that is touching two pieces of fruit at the same time and play two distinctive notes simultaneously.&lt;/p&gt;

&lt;p&gt;Note that attaching fruit to the wires will increase the readings for the capacitance. If your fruit is large, remember to raise the threashold. Here I use 5 because wet paper tissues usually get a reading of 3.&lt;/p&gt;

&lt;p&gt;Also don&#39;t let the fruit touch each other. Once they touch each other, the reading will reach maximum for both pins that are attached to fruit.&lt;/p&gt;

&lt;h1&gt;Demo&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;http://rexpie.github.io/assets/fruit.jpg&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Wed, 16 Sep 2015 00:00:00 +0800</pubDate>
        <link>http://rexpie.github.io/2015/09/16/Fruit-Piano.html</link>
        <guid isPermaLink="true">http://rexpie.github.io/2015/09/16/Fruit-Piano.html</guid>
        
        <category>Visual</category>
        
        <category>Programming</category>
        
        
      </item>
    
      <item>
        <title>Scratch with Johnny-five</title>
        <description>&lt;h1&gt;Installing Scratch for Windows XP&lt;/h1&gt;

&lt;h2&gt;WHY?&lt;/h2&gt;

&lt;p&gt;Well because Scratch is used by teachers and students. They are usually found in places called schools. Schools may not have funding to buy latest models of PC frequently so some of them are still running XP. That&#39;s why.&lt;/p&gt;

&lt;h1&gt;What do you need?&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://scratch.mit.edu/scratchr2/static/sa/Scratch-439.1.exe&quot;&gt;Scratch version 439.1&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Scratch 2 Offline &lt;a href=&quot;https://scratch.mit.edu/scratch2download/&quot;&gt;documentation&lt;/a&gt; suggests if &lt;em&gt;Scratch 2 crashes&lt;/em&gt; on startup, you should reinstall. It does not say anything about &lt;em&gt;computer crash&lt;/em&gt;. FYI I did try reinstall and it did not help. The crash is consistent.&lt;/p&gt;

&lt;h1&gt;What Else do you need?&lt;/h1&gt;

&lt;p&gt;DO &lt;strong&gt;&lt;em&gt;NOT&lt;/em&gt;&lt;/strong&gt; update&lt;/p&gt;

&lt;p&gt;DO &lt;strong&gt;&lt;em&gt;NOT&lt;/em&gt;&lt;/strong&gt; update&lt;/p&gt;

&lt;p&gt;DO &lt;strong&gt;&lt;em&gt;NOT&lt;/em&gt;&lt;/strong&gt; update&lt;/p&gt;

&lt;p&gt;Important things are worth repeating thrice.&lt;/p&gt;

&lt;p&gt;But Adobe Air nudges you every now and then, and Scratch does this everytime on startup.&lt;/p&gt;

&lt;p&gt;It is hard to imagine, in a school environment, nobody would be attempted to click on OK and see what happens.&lt;/p&gt;

&lt;p&gt;We spent too much time on this to know, leave no such things in the hands of the users.&lt;/p&gt;

&lt;h2&gt;Disable Adobe Air Auto Update&lt;/h2&gt;

&lt;p&gt;They do have a way to disable automatic update. It requires either a file added to the user&#39;s application path, or registry editing. &lt;a href=&quot;https://forums.adobe.com/docs/DOC-1321&quot;&gt;See link&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Also, disable update &lt;strong&gt;&lt;em&gt;Immediately&lt;/em&gt;&lt;/strong&gt; after Air installation. Once it gets the taste of the later versions, it is not even possible to install Scratch without updating Air, which would again crash the computer.&lt;/p&gt;

&lt;h2&gt;Disable Scratch 2 Auto Update&lt;/h2&gt;

&lt;p&gt;Scratch checks for the update version from Scratch&#39;s CDN site. Easy way is to modify hosts file and lead the CDN to localhost. But that would make the official site really ugly because it also hosts all the js and css files of the site.&lt;/p&gt;

&lt;p&gt;Second workaround is tricking Scratch to think it actually has a higher version.
Edit the &lt;code&gt;%ProgramFiles(x86)%\Scratch 2\META-INF\AIR\application.xml&lt;/code&gt; and change the &lt;code&gt;&amp;lt;VersionNumber&amp;gt;&lt;/code&gt; content to 999. This is as high as it can get. Don&#39;t try 9999 or 99999. RTFM.&lt;/p&gt;

&lt;h2&gt;Two Stage Installation&lt;/h2&gt;

&lt;p&gt;Actually, &quot;two stage&quot; is euphemism. More like &quot;intentionally fail on the first run then reinstall&quot;.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Install Scratch with default options. It will fire up Scratch after installation and on Windows XP, it will probably cause the blue screen of death.&lt;/li&gt;
&lt;li&gt;Manually remove the &lt;code&gt;C:\Program Files\Scratch 2&lt;/code&gt; folder. Then install Scratch 2 again, but this time, uncheck the &lt;code&gt;Run application after installation&lt;/code&gt; checkbox.&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;Then you should be able to get Scratch running. Under certain conditions.&lt;/p&gt;

&lt;h2&gt;Conditions You Say?&lt;/h2&gt;

&lt;p&gt;Yes. Scratch somehow still dies if you lauch it from the desktop shortcut. Instead, grab a Scratch 2 project file( with &lt;code&gt;.sb2&lt;/code&gt; file extension) and double click that file to open Scratch.&lt;/p&gt;

&lt;h2&gt;Disclaimer&lt;/h2&gt;

&lt;p&gt;Above procedures are tested on XP Professional Simplified Chinese version. Other versions like Home and Enterprise have not been tested. Neither have other language packs.&lt;/p&gt;
</description>
        <pubDate>Fri, 11 Sep 2015 00:00:00 +0800</pubDate>
        <link>http://rexpie.github.io/2015/09/11/installing-scratch-for-win-xp.html</link>
        <guid isPermaLink="true">http://rexpie.github.io/2015/09/11/installing-scratch-for-win-xp.html</guid>
        
        <category>Visual</category>
        
        <category>Programming</category>
        
        
      </item>
    
      <item>
        <title>Stress testing Mosquitto MQTT Broker Update 1</title>
        <description>&lt;h1&gt;Stress Testing Mosquitto Update 1&lt;/h1&gt;

&lt;p&gt;Last time I left a bit in the &lt;code&gt;TODO&lt;/code&gt;, saying that I will test with multiple clients on a host. I did.&lt;/p&gt;

&lt;h2&gt;Env setup&lt;/h2&gt;

&lt;p&gt;To compare the testing, I will give you the hardware settings:&lt;/p&gt;

&lt;p&gt;Host            |CPU Core#  | Mem &lt;br/&gt;
--------------- |---------- |-----
comments: true
comments: true
comments: true
VMware Guest    |1          |4g
Physical        |2          |8g&lt;/p&gt;

&lt;p&gt;The clients are all VMware Guest Ubuntu Desktop machines cloned from the server. They have the same file limits, etc, nothing special.&lt;/p&gt;

&lt;p&gt;I use bridge, not NAT for the network connectivity for the VMWare Guests, so they are just like other machines setup on the local network, not wrapped up inside the VM.&lt;/p&gt;

&lt;h2&gt;Results&lt;/h2&gt;

&lt;p&gt;Quite interesting. The VM Guest, no matter how I tune the numbers, cannot establish more than 655XX TCP connections, regardless of the IP/port combinations.&lt;/p&gt;

&lt;p&gt;I tried to use HAProxy with another guest machine, and I get ~32000 frontend connections, and ~16000 backend connections to each of my two backend Mosquitto servers. So that is about 655XX TCP connection in total.&lt;/p&gt;

&lt;p&gt;I kind of scratch my head when I cannot pass that threshold. I checked the values everywhere and I am sure my configuration is able to host more TCP connections than 655XX. Besides, this number is way too suspicious. I tried half a dozen times and the cap is always 655XX. Then I suspected VMWare.&lt;/p&gt;

&lt;p&gt;Okay I need proof.&lt;/p&gt;

&lt;p&gt;I used the same step to install a vanilla Ubuntu with the same iso image, followed the same steps I wrote myself to setup the server on the physical machine and guess what, I got more connections as expected.&lt;/p&gt;

&lt;h3&gt;Final stats&lt;/h3&gt;

&lt;p&gt;Host            |CPU%   |RAM%   |Conn Speed     |Max Conn
--------------- |------ |------ |---------------|--------
comments: true
comments: true
comments: true
VMware Guest    |90%+   |0.4%   |2000+/s -&gt; ~100/s| &lt;strong&gt;65,535&lt;/strong&gt;
Physical        |90%+   |0.4%   |3000+/s -&gt; ~100/s| &lt;strong&gt;100,000+&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The speed of establishing new connections wears down gradually. Mosquitto can build up 10K connections in a few seconds, but the speed slows down after that.&lt;/p&gt;

&lt;p&gt;I got over 100K live TCP connections with a physical machine, using only 0.4% memory. That is very impressive indeed.&lt;/p&gt;
</description>
        <pubDate>Mon, 31 Aug 2015 00:00:00 +0800</pubDate>
        <link>http://rexpie.github.io/2015/08/31/stress_testing_mosquitto_update_1.html</link>
        <guid isPermaLink="true">http://rexpie.github.io/2015/08/31/stress_testing_mosquitto_update_1.html</guid>
        
        <category>mqtt</category>
        
        <category>mosquitto</category>
        
        
      </item>
    
      <item>
        <title>Scratch with Johnny-five</title>
        <description>&lt;h1&gt;Scratch Extension with Johnny-five&lt;/h1&gt;

&lt;p&gt;Previous &lt;a href=&quot;http://rexpie.github.io/2015/08/23/extending-scratch.html&quot;&gt;article&lt;/a&gt; illustrated the architecture of the Scratch extension.&lt;/p&gt;

&lt;p&gt;We can replace the PyMata part with anything that can act as a broker between Firmata and the HTTP.&lt;/p&gt;

&lt;p&gt;Nodejs has a rich library and &lt;a href=&quot;http://johnny-five.io&quot;&gt;Johnny-five&lt;/a&gt;(J5) is one of the most popular Firmata clients. It is actively maintained by &lt;a href=&quot;https://github.com/rwaldron&quot;&gt;Rick Waldron&lt;/a&gt; as of this document is written.&lt;/p&gt;

&lt;p&gt;I was amazed by how Rick handles issues with chips. I told him one of the LCD chip is not working well with j5 &lt;a href=&quot;https://github.com/rwaldron/johnny-five/issues/326#issuecomment-135857146&quot;&gt;link&lt;/a&gt;. He said the would buy that chip online and test it after. He did things like this multiple times on other occasions as well. Hats off.&lt;/p&gt;

&lt;h1&gt;Let&#39;s do this&lt;/h1&gt;

&lt;p&gt;I want to build a version that works on Windows to start. Both x64 and x86 OS should be able to execute the binaries.&lt;/p&gt;

&lt;p&gt;Why does this matter? Isn&#39;t Nodejs cross platform?&lt;/p&gt;

&lt;p&gt;Because we need to talk through the serial port. J5 depends on &lt;a href=&quot;https://www.npmjs.com/package/serialport&quot;&gt;serialport&lt;/a&gt; package and usually it need compiling. The documents of &lt;code&gt;serialport&lt;/code&gt; package has detailed instructions as how to deal with &#39;build fail&#39; issues.&lt;/p&gt;

&lt;h2&gt;Dependencies&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Nodejs x86 version for compatibility&lt;/li&gt;
&lt;li&gt;Python 2.* matching OS bitness ( 32 for 32bit OS, 64 for 64bit OS)&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;After you get your nodejs and python ready, remember to put the bin path into your PATH variable. Then you create a project path for the helper app. Let&#39;s call it 5jhelper.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd j5helper
npm install johnny-five
npm install serialport
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Sometimes serialport will install successfully with johnny-five. If serialport failed to install, best solution would be RTFM and install it yourself. It says that it already has the binaries shipped with the package for most common use cases. I am not sure how it determines the binary version, but I have to build myself from time to time.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;You &lt;strong&gt;&lt;em&gt;MUST&lt;/em&gt;&lt;/strong&gt; install the serialport package for this to work&lt;/p&gt;&lt;/blockquote&gt;

&lt;h2&gt;Building Helper App with J5&lt;/h2&gt;

&lt;p&gt;You can go to the example folder in the j5 package and have some fun with whatever you have on your hand like Arduino and LED. Or you can checkout the &lt;a href=&quot;https://www.youtube.com/results?search_query=nodebots&quot;&gt;videos&lt;/a&gt; as well.&lt;/p&gt;

&lt;h3&gt;HTTP Server&lt;/h3&gt;

&lt;p&gt;You can use the http module and make it listen on any port you have defined in your extension descriptor, by default the port id 12345.&lt;/p&gt;

&lt;p&gt;You need to remember to call &lt;code&gt;response.end()&lt;/code&gt; promptly or Scratch will hold on to that HTTP request till it times out. The Scratch source code, at this time, is just a while loop firing HTTP requests on a single thread, so it blocks.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Remember to send data back to Scratch as quickly as possible.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;You can parse the HTTP requests sent from Scratch easily as they are in a very simple &lt;a href=&quot;https://github.com/LLK/scratchx/wiki&quot;&gt;slash-delimited format&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;J5 backend&lt;/h3&gt;

&lt;h4&gt;Caching your data&lt;/h4&gt;

&lt;p&gt;Usually j5 API returns very fast, you do not need to worry about the timings. But when you are dealing with loops it becomes somewhat more unpredictable, because writing to the serial device takes time, processing Firmata protocol on Arduino takes time and reflecting on the actual device also takes time. It becomes even slower when you are using a &lt;a href=&quot;http://www.dfrobot.com/index.php?route=product/product&amp;amp;product_id=1220&amp;amp;search=ble&amp;amp;description=true#.VeFMybR7wW8&quot;&gt;USB bluetooth link&lt;/a&gt; to wirelessly connect to your board.&lt;/p&gt;

&lt;p&gt;I tried to write messages to a LCD. The loop keeps the LCD blinking and flashing and rewriting. Every time a message arrives I call &lt;code&gt;lcd.clear()&lt;/code&gt; then &lt;code&gt;lcd.print(msg)&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Keep the output values cached, only write when the value changes.&lt;/p&gt;&lt;/blockquote&gt;

&lt;h1&gt;Disclaimer&lt;/h1&gt;

&lt;p&gt;With the movement of ScratchX( now Beta) This document might be obsolete soon.&lt;/p&gt;
</description>
        <pubDate>Fri, 28 Aug 2015 00:00:00 +0800</pubDate>
        <link>http://rexpie.github.io/2015/08/28/scratch_extension_with_johnny-five.html</link>
        <guid isPermaLink="true">http://rexpie.github.io/2015/08/28/scratch_extension_with_johnny-five.html</guid>
        
        <category>Visual</category>
        
        <category>Programming</category>
        
        
      </item>
    
      <item>
        <title>Load Balancing with HAProxy</title>
        <description>&lt;h1&gt;Need to cluster&lt;/h1&gt;

&lt;p&gt;IBM has a &lt;a href=&quot;http://www.redbooks.ibm.com/redbooks/pdfs/sg248054.pdf&quot;&gt;Redbook&lt;/a&gt; for its own IOT service environment. The book also described the topologies of enterprise MQTT service architectures. So, to cluster some mosquitto brokers, we need some other tools.&lt;/p&gt;

&lt;p&gt;Mosquitto is a single thread process. To scale out, we need tools to better monitor and manage them.&lt;/p&gt;

&lt;h1&gt;Cue in load balancing&lt;/h1&gt;

&lt;p&gt;I followed the steps in this nice &lt;a href=&quot;https://serversforhackers.com/load-balancing-with-haproxy&quot;&gt;tutorial&lt;/a&gt;, others you googled might be just as good, as HAProxy is very easy to install, configure and run.&lt;/p&gt;

&lt;p&gt;I changed the configuration to match our need for mqtt connections.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cfg&quot; data-lang=&quot;cfg&quot;&gt;&lt;span class=&quot;err&quot;&gt;listen&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;mqtt&lt;/span&gt;
  &lt;span class=&quot;err&quot;&gt;bind&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;*:1883&lt;/span&gt;
  &lt;span class=&quot;err&quot;&gt;bind&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;*:1884&lt;/span&gt;
  &lt;span class=&quot;err&quot;&gt;mode&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;tcp&lt;/span&gt;
  &lt;span class=&quot;err&quot;&gt;maxconn&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;200000&lt;/span&gt;
  &lt;span class=&quot;err&quot;&gt;option&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;tcplog&lt;/span&gt;
  &lt;span class=&quot;err&quot;&gt;option&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;redispatch&lt;/span&gt;
  &lt;span class=&quot;err&quot;&gt;balance&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;leastconn&lt;/span&gt;
  &lt;span class=&quot;err&quot;&gt;server&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;serv1&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;192.168.0.36:1883&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;0.0.0.0:1024-65535&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;check&lt;/span&gt;
  &lt;span class=&quot;err&quot;&gt;server&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;serv2&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;192.168.0.136:1883&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;0.0.0.0:1024-65535&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;check&lt;/span&gt;

&lt;span class=&quot;err&quot;&gt;listen&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;stats&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;*:1936&lt;/span&gt;
  &lt;span class=&quot;err&quot;&gt;stats&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;enable&lt;/span&gt;
  &lt;span class=&quot;err&quot;&gt;stats&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;uri&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;/&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Configurations explained&lt;/h2&gt;

&lt;h2&gt;&lt;code&gt;option redispatch&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;This is used to tell HAProxy to retry to another backend server when one of the servers goes down, rather than giving a 503 error back to the fronted.&lt;/p&gt;

&lt;h2&gt;&lt;code&gt;balance leastconn&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;This is the balancing algorithm, we expect to have many TCP connections with little traffic and low spikes so the we should use this method to pan out the number of connections evenly.&lt;/p&gt;

&lt;h2&gt;&lt;code&gt;source 0.0.0.0:1024-65535&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;See this nice &lt;a href=&quot;http://comments.gmane.org/gmane.comp.web.haproxy/5594&quot;&gt;email exchange&lt;/a&gt;, also see haproxy&#39;s &lt;a href=&quot;https://cbonte.github.io/haproxy-dconv/configuration-1.5.html#4-source&quot;&gt;configuration manual&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Basically,&lt;/p&gt;

&lt;h2&gt;Monitoring HAProxy&lt;/h2&gt;

&lt;p&gt;The HAProxy comes with a handy web interface for quick monitoring. The stats block of the configuration shows how to do this. I left out the &lt;code&gt;auth&lt;/code&gt; config so I don&#39;t have to type in user name and password every now and then.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://rexpie.github.io/assets/haproxystat.png&quot; title=&quot;HAProxy Stats Screenshot&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;h1&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;HAProxy can be used to load balance a cluster of single-threaded mosquitto servers in a LAN environment. We can even setup multiple clusters globally.&lt;/p&gt;

&lt;p&gt;Next we maybe can try out the provisioning service as to auto configure the MQTT clients.&lt;/p&gt;
</description>
        <pubDate>Wed, 26 Aug 2015 00:00:00 +0800</pubDate>
        <link>http://rexpie.github.io/2015/08/26/loadbalancing-with-haproxy.html</link>
        <guid isPermaLink="true">http://rexpie.github.io/2015/08/26/loadbalancing-with-haproxy.html</guid>
        
        <category>haproxy,</category>
        
        <category>load</category>
        
        <category>balancing,</category>
        
        <category>mosquitto</category>
        
        
      </item>
    
      <item>
        <title>Mosquitto Troubleshooting</title>
        <description>&lt;h1&gt;Issues with mosquitto_pub&lt;/h1&gt;

&lt;p&gt;When I tried to execute the &lt;code&gt;mosquitto_pub&lt;/code&gt; command, it complains about a lib missing:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;rex@ubuntu:~$ mosquitto_pub -t &#39;/mqtt-bench/benchmark&#39; -m &#39;testContent&#39;
mosquitto_pub: error while loading shared libraries: libmosquitto.so.1: cannot open shared object file: No such file or directory
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I &lt;strong&gt;built&lt;/strong&gt; this from source. Well seems like mosquitto needs a bit more consistent at housekeeping when it tries to install and execute.&lt;/p&gt;

&lt;p&gt;Let&#39;s dig in.&lt;/p&gt;

&lt;p&gt;First use strace to look what it is looking for:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;rex@ubuntu:~$ strace mosquitto_pub -t &#39;/mqtt-bench/benchmark&#39; -m &#39;testContent&#39;
open(&quot;/usr/lib/x86_64/libmosquitto.so.1&quot;, O_RDONLY|O_CLOEXEC) = -1 ENOENT (No such file or directory)
stat(&quot;/usr/lib/x86_64&quot;, 0x7fff1e3b13f0) = -1 ENOENT (No such file or directory)
open(&quot;/usr/lib/libmosquitto.so.1&quot;, O_RDONLY|O_CLOEXEC) = -1 ENOENT (No such file or directory)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Okay so it looks through &lt;code&gt;/usr/lib&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Where &lt;strong&gt;is&lt;/strong&gt; the lib then?&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;rex@ubuntu:~$ locate libmosquitto.so|xargs ls -l
/usr/local/lib/libmosquitto.so
/usr/local/lib/libmosquitto.so.1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So it looks at &lt;code&gt;/usr/lib&lt;/code&gt; rather than &lt;code&gt;/usr/local/lib&lt;/code&gt;. Fair enough, I did not specify the prefix when building.&lt;/p&gt;

&lt;p&gt;Fix is easy:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo ln -s /usr/local/lib/libmosquitto.so.1 /usr/lib/libmosquitto.so.1
&lt;/code&gt;&lt;/pre&gt;
</description>
        <pubDate>Tue, 25 Aug 2015 00:00:00 +0800</pubDate>
        <link>http://rexpie.github.io/2015/08/25/mosquitto-troubleshooting.html</link>
        <guid isPermaLink="true">http://rexpie.github.io/2015/08/25/mosquitto-troubleshooting.html</guid>
        
        <category>mqtt,</category>
        
        <category>mosquitto</category>
        
        
      </item>
    
      <item>
        <title>Stress testing Mosquitto MQTT Broker</title>
        <description>&lt;h1&gt;What am I testing for&lt;/h1&gt;

&lt;p&gt;I am testing the server under a very &lt;strong&gt;specific&lt;/strong&gt; scenario. Very large number of subscribers and publishers, but very little traffic for each one. I am trying to build a sensor network server with push capabilities.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It is written in C, with tiny memory footprints for each connection, unlike Apache&#39;s ActiveMQ or Apollo which creates a thread object for every live connection.&lt;/li&gt;
&lt;li&gt;It is single threaded&lt;/li&gt;
&lt;li&gt;It is easy to install, simple to configure and quick to run&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;I am not saying other brokers are not superior on those aspects. Simplicity is what I am after and after all, I think that managing a network of broker cluster exceeds the boundary of software design and need system architecture behind it. So I want to start with simple tests on a single server and see how it goes.&lt;/p&gt;

&lt;p&gt;Here is an &lt;a href=&quot;http://w3yyb.sinaapp.com/archives/1601&quot;&gt;article&lt;/a&gt; &lt;del&gt;in Chinese&lt;/del&gt; of an emperical study on MQTT broker performances. Basic translation of the conclusion is:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Downsides: Mosquitto only utilizes one CPU; EMQTT writes too much disk io and has low throughput; ActiveMQ/Apollo eats a lot of RAM and sometimes crashes.&lt;/li&gt;
&lt;li&gt;Upsides: EMQTT &amp;amp; Mosquitto are quite stable. EMQTT has high cuncurrent connection counts. Apache ones can use multicore.&lt;/li&gt;
&lt;/ul&gt;


&lt;h1&gt;Prerequisites&lt;/h1&gt;

&lt;p&gt;I am testing on two Linux/Unix like systems (actually they are 2 virtual Ubuntu desktop hosted in a VMWare env, if you must know) connected in the same LAN. Let&#39;s call them &lt;em&gt;Alice&lt;/em&gt; and &lt;em&gt;Bob&lt;/em&gt;.&lt;/p&gt;

&lt;h1&gt;Setting up the environment&lt;/h1&gt;

&lt;p&gt;Here are the steps to execute the stress test. I can give you the results beforehand:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;It can handle at least 20k simultanious connections at a speed of 7000+ messages per second for a single 2.1g core virtual server with just 12MB of mem.&lt;/p&gt;&lt;/blockquote&gt;

&lt;h2&gt;Changing System File Limitations&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt; Do this on both Alice and Bob &lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Your system may restrice open files per process and system-wide file handle counts.&lt;/p&gt;

&lt;p&gt;I found a &lt;a href=&quot;https://rtcamp.com/tutorials/linux/increase-open-files-limit/&quot;&gt;tutorial&lt;/a&gt; for linux/Unix like systems.&lt;/p&gt;

&lt;p&gt;Basically you edit &lt;code&gt;/etc/security/limits.conf&lt;/code&gt; and put in:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;*         hard    nofile      500000&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;*         soft    nofile      500000&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;You may also need to modify &lt;code&gt;/etc/sysctl.conf&lt;/code&gt; and put in:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;fs.file-max = 2097152&lt;/code&gt; and run &lt;code&gt;sysctl -p&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;sudo if necessary&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;Mosquitto Server&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt; Do this on Alice &lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you want to use the latest version, go to their official download &lt;a href=&quot;http://mosquitto.org/download/&quot;&gt;link&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Or if you want to quickly install a curated version for you system, you can also check out their recipes in the same page.&lt;/p&gt;

&lt;p&gt;I built the server from its source. I found out that I need:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;g++&lt;/li&gt;
&lt;li&gt;uuid-dev&lt;/li&gt;
&lt;li&gt;libc-ares-dev&lt;/li&gt;
&lt;li&gt;libssl-dev&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Then you can execute&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;make &amp;amp;&amp;amp; sudo make install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and check if you have &lt;code&gt;mosquitto&lt;/code&gt; available after that.&lt;/p&gt;

&lt;h2&gt;Configuring and Starting Mosquitto&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt; Do this on Alice &lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;You can refer the &lt;a href=&quot;http://mosquitto.org/man/mosquitto-conf-5.html&quot;&gt;documentation&lt;/a&gt; for the detailed parameters, but I focus on the &lt;code&gt;max_connections&lt;/code&gt; configuration value and change it to &lt;code&gt;-1&lt;/code&gt;(unlimited)&lt;/p&gt;

&lt;p&gt;Then just execute &lt;code&gt;mosquitto&lt;/code&gt;. You can add the &lt;code&gt;-d&lt;/code&gt; switch to run it in the background. I just like to see the logs.&lt;/p&gt;

&lt;h2&gt;Benchmark tool&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt; Do this on Bob &lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I used a pretty cool tool called &lt;a href=&quot;https://github.com/takanorig/mqtt-bench&quot;&gt;mqtt-bench&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I can&#39;t get it to work using the &lt;code&gt;go get&lt;/code&gt; command in its documentation, so I downloaded the &lt;a href=&quot;https://github.com/takanorig/mqtt-bench/wiki/Download&quot;&gt;binary&lt;/a&gt; as it advised.&lt;/p&gt;

&lt;h2&gt;Starting Test&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt; Do this on Bob &lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The CLI command for the benchmark tool looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;./mqtt-bench  -action=p -broker=&quot;tcp://192.168.0.89:1883&quot; -clients=20000 -count=10
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Checking Status on Alice&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt; Of course do this on Alice &lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;You can use the &lt;code&gt;top&lt;/code&gt; command to see the CPU and memory usage of Alice.
For mine, I see a single core surge to 100 with a 0.3% memory ( out of 4G, so 12M ) when the connections are being accepted.&lt;/p&gt;

&lt;p&gt;You can also check the network connections using:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;netstat -pant | grep mosquitto | wc -l
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;I already gave the results.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;//TODO&lt;/code&gt; Next time maybe I can use some more Bobs to connect to Alice and see how much fun they can have.&lt;/p&gt;
</description>
        <pubDate>Sun, 23 Aug 2015 18:55:00 +0800</pubDate>
        <link>http://rexpie.github.io/2015/08/23/stress-testing-mosquitto.html</link>
        <guid isPermaLink="true">http://rexpie.github.io/2015/08/23/stress-testing-mosquitto.html</guid>
        
        <category>mqtt</category>
        
        <category>mosquitto</category>
        
        
      </item>
    
      <item>
        <title>Extending Scratch</title>
        <description>&lt;h2&gt;Why Scratch&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://scratch.mit.edu/&quot;&gt;Scratch2&lt;/a&gt; is becoming more mature with a steadily growing user community. MIT has done a great job at propelling programming education.&lt;/p&gt;

&lt;p&gt;We focus on how to leverage Scratch to further enable hardware interaction for the young.&lt;/p&gt;

&lt;p&gt;The challenge is extending Scratch and make it talk to the various boards and devices.&lt;/p&gt;

&lt;h2&gt;But How?&lt;/h2&gt;

&lt;p&gt;Here is the architecture of the Scratch extension module. Note this is still under development by the Scratch team and is subject to change.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://rexpie.github.io/assets/Scratch2.png&quot; title=&quot;Scratch Architecture&quot; alt=&quot;Scratch arch&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You can also check the &lt;a href=&quot;http://wiki.scratch.mit.edu/wiki/Scratch_Extension&quot;&gt;official extension wiki&lt;/a&gt; to get the latest updated info.&lt;/p&gt;

&lt;h2&gt;What else?&lt;/h2&gt;

&lt;p&gt;As you can see in the architecture diagram, you will need a &lt;strong&gt;helper app&lt;/strong&gt; to enable the communication as Scratch does not speak on channels other than the &lt;code&gt;HTTP&lt;/code&gt; protocol.&lt;/p&gt;

&lt;p&gt;What you need is a third party, preferrably open sourced project to do that. Your helper app should act as an &lt;code&gt;HTTP proxy&lt;/code&gt; and talk to Scratch &lt;strong&gt;AND&lt;/strong&gt; it should also be able to talk to the board via serial ports.&lt;/p&gt;

&lt;h2&gt;Who&#39;s doing this&lt;/h2&gt;

&lt;p&gt;Let&#39;s take a look at some open source initiatives&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://johnny-five.io&quot;&gt;johnny-five&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/MrYsLab/s2a_fm&quot;&gt;s2a_fm&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt; Both projct is based on the &lt;a href=&quot;http://firmata.org/&quot;&gt;Firmata&lt;/a&gt; protocol.&lt;/p&gt;

&lt;h3&gt;johnny-five&lt;/h3&gt;

&lt;p&gt;This popular project is node-js based. Highly configurable, actively maintained and very popular. You can leverage the server module of the nodejs project and easily put together a helper app with very little code.&lt;/p&gt;

&lt;p&gt;Some sample code:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;five&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;johnny-five&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;board&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;five&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Board&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;board&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;ready&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;led&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;five&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Led&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;13&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;led&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;blink&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;500&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;s2a_fm&lt;/h3&gt;

&lt;p&gt;This project bases on PyMata, a firmata Python client. It already integrated the server request handling and Firmata communication. You can extend the existing modules within the framework relatively easily.&lt;/p&gt;

&lt;p&gt;Here is a &lt;a href=&quot;https://www.youtube.com/watch?v=tUv_Uu_SqZk&quot;&gt;video&lt;/a&gt; for s2a_fm based project&lt;/p&gt;

&lt;p&gt;You can choose whichever project you are comfortable with.&lt;/p&gt;
</description>
        <pubDate>Sun, 23 Aug 2015 00:00:00 +0800</pubDate>
        <link>http://rexpie.github.io/2015/08/23/extending-scratch.html</link>
        <guid isPermaLink="true">http://rexpie.github.io/2015/08/23/extending-scratch.html</guid>
        
        <category>Visual</category>
        
        <category>Programming</category>
        
        
      </item>
    
      <item>
        <title>Hacking Ardublock</title>
        <description>&lt;h2&gt;Adding an extension to Ardublock&lt;/h2&gt;

&lt;p&gt;Extended From: &lt;a href=&quot;http://blog.ardublock.com/2012/05/04/how-to-hack-ardublock/&quot;&gt;How to hack ardublock&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;Handling the dependencies&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Fork and clone Arduino form github&lt;/li&gt;
&lt;li&gt;Import openblocks and Ardublock into eclipse&lt;/li&gt;
&lt;li&gt;Import arduino-builder,arduino-dore and processing from Arduino project into eclipse&lt;/li&gt;
&lt;li&gt;Modify the buildpath of Ardublock and add the above 3 projects as dependency. Add openblocks and an dependency as well.&lt;/li&gt;
&lt;li&gt;Modify pom.xml in Ardublock，delete openblocks and Arduino dependency entries(They became obsolete over time and was no longer maintained)&lt;/li&gt;
&lt;li&gt;Continue to delete the install-arduino-pde execution entry in pom.xml&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;You should now see no compiling errors within the projects. You may have a few warnings about the java compiler version. Just change the compilation configs to make eclipse happy.&lt;/p&gt;

&lt;p&gt;**If you are using other IDEs like IntelliJ, please use your own judgement to appropriately adapt the steps.&lt;/p&gt;

&lt;h3&gt;Adding an LED module&lt;/h3&gt;

&lt;p&gt;You can use the Ardublock article to do the same, here are some basic ideas:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Add one BlockGenus with your own parameters&lt;/li&gt;
&lt;li&gt;Register the BlockGenus into one BlockDrawer so that you&#39;ll see the newly added module in the GUI, inside the designated drawer menu.&lt;/li&gt;
&lt;li&gt;If you need new image, tag or other custom resources to go with the new module, you need to add them to the resources folder, with i18n entries. Modify the &lt;code&gt;ardublock&amp;lt;_{country_code}&amp;gt;.properties&lt;/code&gt; i18n file to achieve that.&lt;/li&gt;
&lt;li&gt;Modify block-mapping.properties and point the module to use the corresponding &lt;code&gt;Translator&lt;/code&gt; Java class. You need to extend the &lt;code&gt;Translator&lt;/code&gt; class if you want to dive in deeper.&lt;/li&gt;
&lt;/ol&gt;


&lt;h3&gt;Export and install&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Right click Ardublock and Openblocks projects and export a jar package&lt;/li&gt;
&lt;li&gt;You need to check the &lt;code&gt;export with all resources&lt;/code&gt; checkbox to include the image and configuration files.&lt;/li&gt;
&lt;li&gt;Put your jar into the Arduino tools folder. Be careful with the folder names as one of them is said to be case sensitive. See the &lt;a href=&quot;http://blog.ardublock.com/2012/05/04/how-to-hack-ardublock/&quot;&gt;official tutorial&lt;/a&gt; for sure.&lt;/li&gt;
&lt;/ol&gt;


&lt;h3&gt;Test&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Open the Arduino installation folder&lt;/li&gt;
&lt;li&gt;Run Arduino-debug and you can see the logs in the console window.&lt;/li&gt;
&lt;li&gt;Click on &lt;code&gt;Tools&lt;/code&gt;-&gt;&lt;code&gt;Ardublock&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Drag your new module and test the functions.&lt;/li&gt;
&lt;/ol&gt;


&lt;h2&gt;Adding an I2C module&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;You need to know how to add your custom header file and c++ file&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you want to use I2C modules like an I2C mounted 1602 LCD, you need to add the I2C c++ libraries for easier coding. The original Ardublock can only generate a single ino file. Here is how:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;First you create your new module, of course. See steps above. Let&#39;s call the new module I2C.&lt;/li&gt;
&lt;li&gt;Modify the &lt;code&gt;Translator&lt;/code&gt; base class and add a &lt;code&gt;customHeaderFileSet&lt;/code&gt; private member, maybe next to its own &lt;code&gt;headerFileSet&lt;/code&gt; member.&lt;/li&gt;
&lt;li&gt;Add a &lt;code&gt;addCustomHeaderFile&lt;/code&gt; API for clients and derived classes to manipulate the &lt;code&gt;customHeaderFileSet&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Modify your I2C module and call your API to add the custom header and/or c++ file.&lt;/li&gt;
&lt;/ol&gt;


&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;translator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addCustomHeaderFile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;LiquidCrystal_I2C.h&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;Import your header files and cpp file to eclipse. You should keep them well in your classpath.&lt;/li&gt;
&lt;li&gt;Next you need to use file manipulation to read from your jar file, and write the file stream into the Aruino temp project location. You don&#39;t want to write to the destination, since they would clobber the source file to import.&lt;/li&gt;
&lt;li&gt;Find the Aruino &lt;code&gt;Editor&lt;/code&gt; instance along the &lt;code&gt;Context&lt;/code&gt; instance and open your temp header and/or c++ file.&lt;/li&gt;
&lt;li&gt;Set the editor to the ino file, or else your translated text will be writing to the last file you opened by default.&lt;/li&gt;
&lt;/ol&gt;


&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;Sketch&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sketch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getEditor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getSketch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;File&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;folder&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sketch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getFolder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getParentFile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;File&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;header&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;folder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getAbsolutePath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;separator&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fileName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;InputStream&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getResource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;/com/ardublock/translator/block/dfrobot/&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fileName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;openStream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;OutputStream&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;FileOutputStream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;header&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buffer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4096&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bytesRead&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bytesRead&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buffer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buffer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bytesRead&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;is&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;You can easily add new module for &lt;strong&gt;simple input and output&lt;/strong&gt;.
You have to drill down to the &lt;code&gt;Translator&lt;/code&gt; core for advanced code generation, but it is not a very difficult task because the source code is quite well orgnized. Thumbs up to the &lt;a href=&quot;http://blog.ardublock.com&quot;&gt;Arublock&lt;/a&gt; team.&lt;/p&gt;
</description>
        <pubDate>Sat, 22 Aug 2015 00:00:00 +0800</pubDate>
        <link>http://rexpie.github.io/2015/08/22/Hacking-Ardublock.html</link>
        <guid isPermaLink="true">http://rexpie.github.io/2015/08/22/Hacking-Ardublock.html</guid>
        
        <category>Visual</category>
        
        <category>Programming</category>
        
        
      </item>
    
  </channel>
</rss>
